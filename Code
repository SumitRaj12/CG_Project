#include <GL/glew.h>
#include <GL/glut.h>
#include <vector>
#include <queue>
#include <limits>
#include <iostream>
#include <sstream>

const int WIDTH = 800;
const int HEIGHT = 600;
int index = -1;
float vertex[][2] = { {100,300},{200,500},{200,100},{400,500},{400,100},{500,300} };

//Structure for edges.
struct Edge {
    int from, to;
    int capacity;
    int flow;
};
//structure for nodes.
struct Node {
    int id;
    std::vector<Edge> edges;
};

class Graph {
public:
    Graph() : numNodes(0) {}   // constructor

    //adding nodes
    void addNode() {
        nodes.push_back({ numNodes++ });
    }
    //adding edges
    void addEdge(int from, int to, int capacity) {
        nodes[from].edges.push_back({ from, to, capacity, 0 });
        nodes[to].edges.push_back({ to, from, 0, 0 }); // Reverse edge for residual graph
    }
    //Breadth first search
    bool bfs(int source, int sink, std::vector<int>& parent) {
        std::vector<bool> visited(numNodes, false);
        std::queue<int> q;
        q.push(source);
        visited[source] = true;
        parent[source] = -1;

        while (!q.empty()) {
            int u = q.front();
            q.pop();

            for (const Edge& edge : nodes[u].edges) {
                if (!visited[edge.to] && edge.capacity > edge.flow) {
                    if (edge.to == sink) {
                        parent[edge.to] = u;
                        return true;
                    }
                    q.push(edge.to);
                    parent[edge.to] = u;
                    visited[edge.to] = true;
                }
            }
        }
        return false;
    }
    //ford-fulkerson algorithm
    void fordFulkerson(int source, int sink) {
        std::vector<int> parent(numNodes);
        int maxFlow = 0;

        while (bfs(source, sink, parent)) {
            int pathFlow = std::numeric_limits<int>::max();
            for (int v = sink; v != source; v = parent[v]) {
                int u = parent[v];
                for (Edge& edge : nodes[u].edges) {
                    if (edge.to == v && edge.capacity > edge.flow) {
                        pathFlow = std::min(pathFlow, edge.capacity - edge.flow);
                    }
                }
            }

            for (int v = sink; v != source; v = parent[v]) {
                int u = parent[v];
                for (Edge& edge : nodes[u].edges) {
                    if (edge.to == v) {
                        edge.flow += pathFlow;
                    }
                }
                for (Edge& edge : nodes[v].edges) {
                    if (edge.to == u) {
                        edge.flow -= pathFlow;
                    }
                }
            }

            maxFlow += pathFlow;
        }

        std::cout << "The maximum possible flow is " << maxFlow << std::endl;
    }

    void resetFlows() {
        for (Node& node : nodes) {
            for (Edge& edge : node.edges) {
                edge.flow = 0;
            }
        }
    }

    std::vector<Node> nodes;
    int numNodes;

private:
};

Graph graph;
bool inputMode = false;
int inputNode1 = -1, inputNode2 = -1;
int inputCapacity = 0;
std::string inputBuffer;

void initOpenGL();
void display();
void renderGraph();
void reshape(int width, int height);
void keyboard(unsigned char key, int x, int y);
//void mouse(int button, int state, int x, int y);

void initOpenGL() {
    glClearColor(0.0, 0.0, 0.0, 1.0);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    glOrtho(0, WIDTH, 0, HEIGHT, -1, 1);
    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();
}

void display() {
    glClear(GL_COLOR_BUFFER_BIT);
    renderGraph();
    glutSwapBuffers();
}

void renderGraph() {
    glColor3f(1.0, 1.0, 1.0); // Set color to white for edges

    for (const Node& node : graph.nodes) {
        for (const Edge& edge : node.edges) {
            if (edge.capacity > 0) {
                // Calculate edge positions
                float x1 = vertex[node.id][0];
                float y1 = HEIGHT - vertex[node.id][1];
                float x2 = vertex[edge.to][0];
                float y2 = HEIGHT - vertex[edge.to][1];

                // Draw edge
                glBegin(GL_LINES);
                glVertex2f(x1, y1);
                glVertex2f(x2, y2);
                glEnd();

                // Display capacity and flow
                std::stringstream flowText;
                flowText << edge.flow << "/" << edge.capacity;
                glRasterPos2f((x1 + x2) / 2, (y1 + y2) / 2);
                for (char c : flowText.str()) {
                    glutBitmapCharacter(GLUT_BITMAP_HELVETICA_18, c);
                }

                // Debug output
                std::cout << "Drawing edge from (" << x1 << ", " << y1 << ") to ("
                    << x2 << ", " << y2 << ") with flow " << edge.flow
                    << " and capacity " << edge.capacity << std::endl;
            }
        }
    }

    // Draw nodes
    glColor3f(0.0, 1.0, 0.0); // Set color to green for nodes
    glPointSize(10.0); // Set point size
    glBegin(GL_POINTS);
    for (int i = 0; i <= index; i++) {
        float x = vertex[i][0];
        float y = HEIGHT - vertex[i][1];
        glVertex2f(x, y);

        // Debug output
        std::cout << "Drawing node at (" << x << ", " << y << ")" << std::endl;
    }
    glEnd();
}

void reshape(int width, int height) {
    glViewport(0, 0, width, height);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    glOrtho(0, width, 0, height, -1, 1);
    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();
}

void keyboard(unsigned char key, int x, int y) {
    switch (key) {
    case 'r': // Reset flows
        graph.resetFlows();
        glutPostRedisplay();
        break;
    case 'f': // Run Ford-Fulkerson algorithm
        if (graph.numNodes > 1) {
            graph.resetFlows();
            graph.fordFulkerson(0, graph.numNodes - 1);
            glutPostRedisplay();
        }
        break;
    case 'n': // Add a new node
        graph.addNode();
        index++;
        glutPostRedisplay();
        break;
    case 'e': // Start edge input mode
        inputMode = true;
        inputNode1 = inputNode2 = -1;
        inputBuffer.clear();
        std::cout << "Enter node1 node2 capacity: ";
        break;
    case 27: // Escape key
        exit(0);
        break;
    case '\r': // Enter key to finalize edge input
        if (inputMode) {
            std::istringstream iss(inputBuffer);
            iss >> inputNode1 >> inputNode2 >> inputCapacity;
            if (inputNode1 >= 0 && inputNode1 < graph.numNodes && inputNode2 >= 0 && inputNode2 < graph.numNodes && inputCapacity > 0) {
                graph.addEdge(inputNode1, inputNode2, inputCapacity);
            }
            inputMode = false;
            inputBuffer.clear();
            glutPostRedisplay();
        }
        break;
    default:
        if (inputMode) {
            inputBuffer += key;
            std::cout << key;
        }
        break;
    }
}


 
int main(int argc, char** argv) {
    // Initialize GLUT
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB);
    glutInitWindowSize(WIDTH, HEIGHT);
    glutCreateWindow("Network Flow Visualization");

    // Initialize GLEW
    glewExperimental = true;
    if (glewInit() != GLEW_OK) {
        std::cerr << "Failed to initialize GLEW" << std::endl;
        return -1;
    }

    initOpenGL();

    glutDisplayFunc(display);
    glutReshapeFunc(reshape);
    glutKeyboardFunc(keyboard);
    //glutMouseFunc(mouse);

    glutMainLoop();

    return 0;
}

